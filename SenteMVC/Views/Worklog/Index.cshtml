@model Sente.Application.ViewModels.WorklogAnalysisResultViewModel

@{
    ViewData["Title"] = "Worklog Analysis";
    var fromDate = ViewData["FromDate"]?.ToString() ?? DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd");
    var toDate = ViewData["ToDate"]?.ToString() ?? DateTime.Now.ToString("yyyy-MM-dd");
}

<div class="container mt-5">
    <h1 class="mb-4">Worklog Analysis</h1>

    <form method="get" asp-action="Index" class="form-inline mb-4">
        <div class="form-group mr-2">
            <label for="fromDate" class="mr-2">From:</label>
            <input type="date" class="form-control" id="fromDate" name="fromDate" value="@fromDate" required>
        </div>
        <div class="form-group mr-2">
            <label for="toDate" class="mr-2">To:</label>
            <input type="date" class="form-control" id="toDate" name="toDate" value="@toDate" required>
        </div>
        <button type="submit" class="btn btn-primary">Analyze</button>
    </form>

    <div class="row">
        <div class="col-md-12">
            <h4>Combined Hours</h4>
            <canvas id="combinedHoursChart"></canvas>
        </div>
    </div>

    <h3 class="mt-5">Summary</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Category</th>
                <th>Hours</th>
                <th>Percentage</th>
            </tr>
        </thead>
        <tbody>
            @{
                var total = Model.AllHoursWithTypes.Sum(h => h.Value);
                var totalHours = Math.Round(total, 2);

                string FormatPercentage(double part, double total)
                {
                    return total > 0 ? $"{Math.Round((part / total * 100), 2) :0.00}%" : "0.00%";
                }
            }
            @{

                foreach (var hourType in Model.Types)
                {
                    var hourValue = Model.AllHoursWithTypes.Where(h => h.Qualification.ItemSymbol == hourType).Sum(h => h.Value);
                    <tr>
                        <td>@hourType</td>
                        <td>@hourValue</td>
                        <td>@FormatPercentage(Math.Round(hourValue, 2), totalHours)</td>
                    </tr>
                }
            }
        </tbody>
    </table>


    <h3 class="mt-5">Individual Breakdown</h3>
    @{
        var authorData = new Dictionary<string, List<object>>();

        foreach (var author in Model.Authors)
        {
            List<object> hours = new List<object>();
            foreach (var type in Model.Types)
            {

                var currentHours = Model.AllIndyvidualHoursWithTypes[author].FirstOrDefault(h => h.Qualification.ItemSymbol == type);

                if(currentHours != null)
                {

                    hours.Add(new
                    {
                        type = type,
                        hours = currentHours.Value.ToString().Replace(",", ".")
                    });
                }
            }
            authorData[author] = hours;
        }

        var allHoursByType = new Dictionary<string, string>();

        foreach (var type in Model.Types)
        {
            allHoursByType.Add(type, Model.AllHoursWithTypes.Where(h => h.Qualification.ItemSymbol == type).Sum(h => h.Value).ToString());
        }

    }

    <script>
        var authorData = @Html.Raw(Json.Serialize(authorData));
        var allHoursByType = @Html.Raw(Json.Serialize(allHoursByType));
    </script>

    <div class="row">
        @foreach (var author in Model.Authors)
        {
            <div class="col-md-4 smallChart" >
                <h4>@author Hours</h4>
                <canvas class="authorHoursChart" data-author="@author"></canvas>
            </div>
        }
    </div>
   <br/>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Author</th>
                @foreach (var type in Model.Types)
                {
                   <th>@type</th>        
                }
                
            </tr>
        </thead>
        <tbody>
            @foreach (var author in Model.Authors)
            {
                <tr>
                    <td>@author</td>
                    @foreach(var type in Model.Types)
                    {
                        if(Model.AllIndyvidualHoursWithTypes.Keys.Any(k => k == author))
                        {
                            var value = Model.AllIndyvidualHoursWithTypes[author].FirstOrDefault(h => h.Qualification.ItemSymbol == type)?.Value ?? 0;
                            <td>@(Math.Round(value, 2))</td>   
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    
        function createCombinedChart(ctx, labels, data) {
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        data: data.map(d => d.hours),
                        backgroundColor: ['#007bff', '#0331fc', '#28a745', '#dc3545', '#ffc107'],
                        borderWidth: 1
                    }],
                },
                options: {
                    responsive: true,
                    tooltips: {
                        callbacks: {
                            label: function (tooltipItem, data) {
                                var dataset = data.datasets[tooltipItem.datasetIndex];
                                var total = dataset.data.reduce((acc, value) => acc + value, 0);
                                var currentValue = dataset.data[tooltipItem.index];
                                var percentage = Math.round((currentValue / total) * 100);
                                return `${data.labels[tooltipItem.index]}: ${currentValue} hours (${percentage}%)`;
                            }
                        }
                    },
                    legend: {
                        position: 'top',
                    }
                }
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            let data = [];
            let types = [];
            let dataByType = window.allHoursByType;

            Object.keys(dataByType).forEach(function (type) {
                data.push({ hours: dataByType[type].toString().replace(",",".") });
            });

            Object.keys(dataByType).forEach(function (type) {
                types.push(type.toString());
            });

            let ctx = document.getElementById('combinedHoursChart').getContext('2d');

            createCombinedChart(ctx, types, data);
        });


        document.addEventListener("DOMContentLoaded", function () {
            // Fetch all elements with the class 'authorHoursChart'
            let charts = document.getElementsByClassName('authorHoursChart');
            let dataByType = window.allHoursByType;

            // Loop through each canvas element
            Array.from(charts).forEach(function (chart) {


                let author = chart.getAttribute('data-author'); // Get the author name from the data-author attribute
                let ctx = chart.getContext('2d'); // Get the context for the current canvas
                let authorInfo = authorData[author];
                console.log(authorData[author]);

                let data = [];
                let types = [];

                Object.keys(authorInfo).forEach(function (key) {

                    console.log(key);
                    let currentHours = authorInfo[key];


                    data.push({ hours: currentHours.hours });

                    types.push(currentHours.type.toString());
                })

                createCombinedChart(ctx, types, data);
            });
        });
    </script>
}
